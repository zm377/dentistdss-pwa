import React, { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';
import config from '../config';

function OAuth2RedirectHandler() {
  const location = useLocation();
  const navigate = useNavigate();
  const { loginWithTokenAndData, /* Consider adding a more specific method like handleOAuthSuccess in AuthContext if needed */ } = useAuth();

  useEffect(() => {
    console.log(location);
    const params = new URLSearchParams(location.search);
    const token = params.get('token');
    // You might also receive other parameters like 'error' if something went wrong
    const error = params.get('error');

    if (token) {
      // We have a token. Now, we need to store it and fetch user data.
      // The loginWithTokenAndData function in AuthContext can be used or adapted.
      // It expects (token, userData). We might need to fetch userData or decode the token.
      // For now, let's assume the token itself is enough or loginWithTokenAndData can handle it.
      
      // A more robust approach would be to have loginWithTokenAndData:
      // 1. Store the token.
      // 2. Set Authorization header for future requests.
      // 3. Call a 'me' endpoint to get user data.
      // 4. Set currentUser in context.

      // Let's simplify for now: assume the AuthResponse from backend (wrapped in ApiResponse) 
      // which is generated by tokenProvider.generateToken() in oauth-service
      // contains enough info in JWT claims, or we call /me endpoint after setting token.

      // Storing token and setting it for future API calls is typically done within a method in AuthContext.
      // Here, we're assuming loginWithTokenAndData can be called with just the token,
      // and it will internally fetch user data if necessary or if userData is not passed.
      
      localStorage.setItem('authToken', token); // Store token
      // Ensure axios defaults are updated if not handled by loginWithTokenAndData directly after this
      // axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

      // Option 1: If AuthContext's loginWithTokenAndData can take just the token and then fetch user
      // loginWithTokenAndData(token, null); // It would then fetch user

      // Option 2: Or, if your JWT token contains all necessary user details to populate currentUser directly (less common for full profiles)
      // const decodedUser = jwtDecode(token); // using a library like jwt-decode
      // loginWithTokenAndData(token, decodedUser);

      // Option 3: Best: Call loginWithTokenAndData, which then triggers a fetch to /api/auth/me
      // For this to work, loginWithTokenAndData should be designed to set the token, then fetch user.
      // The current loginWithTokenAndData(token, userData) expects userData.
      // We need to adjust AuthContext or call the /me endpoint here.

      // Let's call /me endpoint manually for now then use loginWithTokenAndData
      const fetchUser = async () => {
        try {
          // Temporarily set auth header for the /me call
          const tempAxiosInstance = axios.create(); // Use a temporary instance or configure global default
          tempAxiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;
          const response = await tempAxiosInstance.get(`${config.api.baseUrl}/api/auth/me`); // Assuming /api/auth/me is the correct path
          
          if (response.data && response.data.success && response.data.message) {
            loginWithTokenAndData(token, response.data.message); // response.data.message is UserResponse
            navigate('/dashboard'); // Redirect to dashboard or desired page
          } else {
            console.error('OAuth Redirect: Failed to fetch user data or invalid response format', response.data);
            navigate('/login?error=oauth_failed');
          }
        } catch (err) {
          console.error('OAuth Redirect: Error fetching user after token reception:', err);
          navigate('/login?error=oauth_error');
        }
      };

      fetchUser();

    } else if (error) {
      console.error("OAuth Error:", error);
      // Handle error, e.g., by showing a notification and redirecting to login
      navigate(`/login?error=${error}`);
    } else {
      // No token and no error, unusual state, redirect to login
      navigate('/login?error=invalid_oauth_state');
    }
  }, [location, navigate, loginWithTokenAndData]);

  return (
    <div>
      <p>Loading, please wait...</p>
      {/* You can add a spinner or a more sophisticated loading UI here */}
    </div>
  );
}

export default OAuth2RedirectHandler; 